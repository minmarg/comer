/***************************************************************************
 *   Copyright (C) 2008 by Mindaugas Margelevicius                         *
 *   Institute of Biotechnology, Vilnius                                   *
 *   minmar@ibt.lt                                                         *
 *                                                                         *
 ***************************************************************************/

#ifndef __datapro_h__
#define __datapro_h__

#include "debug.h"
#include "types.h"
#include "compdef.h"
#include "defines.h"
#include "pcmath.h"
#include "data.h"
#include "mystring.h"
#include "myexcept.h"
#include "CtxtCoefficients.h"
#include "ext/pslvector.h"


//globals
extern const bool   SCORES_IN_PROFILE;

//enums
//profile transition states
enum TPTRANS {
    P_MM, P_MI, P_MD,
    P_IM, P_II, P_ID,
    P_DM, P_DI, P_DD,
    P_NSTATES
};
static const char*  gTPTRANS_NAMES[P_NSTATES] = {
    "MM", "MI", "MD",
    "IM", "II", "ID",
    "DM", "DI", "DD"
};
//profile states
enum TPSTATES {
    PS_M,
    PS_I,
    PS_D,
    PS_NSTATES
};
static const char*  gTPSTATES_NAMES[PS_NSTATES] = {
    "M", "I", "D"
};
static const int    gTPTRANS_NTPS = 3;  //number of transitions per state
//Dirichlet distribution parameters, alphas, for transition priors
// * G.Mitchison, S.R.Eddy data
// static double       gTPTRANS_ALPHAS[P_NSTATES] = {
//     0.7939, 0.0278, 0.0135,   //MM, MI, MD,
//     0.1551, 0.1331, 0.0000,   //IM, II, ID,
//     0.9002, 0.0000, 0.5630    //DM, DI, DD,
// };
static double       gTPTRANS_ALPHAS[P_NSTATES] = {
    0.7939, 0.0234, 0.0234,   //MM, MI, MD,
    0.1551, 0.4653, 0.0000,   //IM, II, ID,
    0.3001, 0.0000, 0.9002    //DM, DI, DD,
};

//mixing of profile target frequencies
enum TTFrMix {
    tfrmixNo,       //no mixing
    tfrmixHDPCtx    //mix target frequencies under HDP framework
};

//score adjustment
enum TScoAdj {
    scoadjNo,       //no adjustment
    scoadjHDPCtx,   //score adjustment under HDP framework
    scoadjHDPsco    //score adjustment from HDP cluster distribution along struct. alignments
};


//parameters of normal context vector distributed as mv. t-distribution
struct _TCTXVECT
{
    _TCTXVECT();
    //
    const int    AVGLEN, hAVGLEN;//length for averaging
    const double AVGCWGT;//central weight in averaging
    const CtxtCoefficients  AVGCOEFFS;//coefficients in averaging
    //
    const int    CTXLEN;//context length
    const double CWGT;//central weight of context coefficients
    const bool   MIX;//mix normal vectors within the context
    const bool   AUG;//augment vector 3-fold: into left, center, right partitions
    const bool   MEAN;//mean vector in use
    const int    DIM;//dimensions of context vector
    const double KAPPA0;//strictly positive
    const double NU0;//must be greater than dim-1
    const Pslvector MU0;//mean vector
    const double loKAPPA0;
    const double PowerNU0;
    const double CTERM;//constant term in calculating log probability of observations
};
extern _TCTXVECT    CVS;


// AB Robinson and LR Robinson background probabilities
// (PNAS USA 88, 1991, 8880-4)
static const double Robinson_PROBS[ NUMALPH ] = {
//   A         R         N         D         C         Q         E         G         H         I 
//   L         K         M         F         P         S         T         W         Y         V 
//   B         Z         X         *         -  
  0.078050, 0.051290, 0.044870, 0.053640, 0.019250, 0.042640, 0.062950, 0.073770, 0.021990, 0.051420,
  0.090190, 0.057440, 0.022430, 0.038560, 0.052030, 0.071200, 0.058410, 0.013300, 0.032160, 0.064410,
  0.000000, 0.000000, 0.000000, 0.000000, 0.000000 
};


// Background probabilities by pscores
static const double Pscores_PROBS[ NUMALPH ] = {
//   A         R         N         D         C         Q         E         G         H         I 
//   L         K         M         F         P         S         T         W         Y         V 
//   B         Z         X         *         -  
  0.094028, 0.053829, 0.039187, 0.060046, 0.013052 ,0.032910, 0.060580, 0.079290, 0.024236, 0.062608,
  0.105052, 0.045876, 0.019318, 0.037945, 0.043358, 0.060625, 0.051353, 0.012555, 0.029567, 0.074585, 
  0.000000, 0.000000, 0.000000, 0.000000, 0.000000
};


// Precomputed log-frequency values
struct _TLOG_FREQUENCIES
{
    _TLOG_FREQUENCIES();
    double      operator[]( int v ) { return data[v];           }
    double      SumOf( int v )      { return sums[v];           }
    double      Total()             { return sums[NUMFREQ-1];   }
private:
    double      data[ NUMFREQ ];
    double      sums[ NUMFREQ ];    //sums of values for each frequency value
};
extern _TLOG_FREQUENCIES    LOG_FREQUENCIES;

// _________________________________________________________________________
// CLASS _LOSCORES
//
class _TRANS_PROBS
{
public:
    enum TPriorClass {
        Dirichlet   //Dirichlet prior
    };
    _TRANS_PROBS();

    TPriorClass GetClass() const            { return class_; }
    void SetClass( TPriorClass value );

    double GetEffNoSequences( int mid ) const;
    void SetEffNoSequences( double nm, double ni, double nd );

    void PME( const double( *obsfreqs )[P_NSTATES] );//posteriorize

    const double ( *GetPriors() const )[P_NSTATES] { return &priors_; }
    const double ( *GetPMEstimators() const )[P_NSTATES] { return &pmestimators_; }
    const double ( *GetLogPMEstimators() const )[P_NSTATES] { return &logpmestimators_; }

protected:
    void InitOnce();
    void Initialize();
    void DirPME( const double( *obsfreqs )[P_NSTATES] );//posteriorize with Dirichlet priors

private:
    TPriorClass     class_; //class of priors
    double          effnos_[PS_NSTATES];//effective number of sequences for each state
    double          sumalphas_[PS_NSTATES];//sum of alpha parameters
    double          priors_[P_NSTATES];//prior transition probabilities
    double          pmestimators_[P_NSTATES];//transition probability estimators
    double          logpmestimators_[P_NSTATES];//log values of estimators
};
extern _TRANS_PROBS TRANSPROBS;
// //

// _________________________________________________________________________
// CLASS _LOSCORES
//
class _LOSCORES
{
public:
    enum TScoreClass {
        Class80,
        Class62,
        Class45,
        ClassGn,
        ClassPS
    };
    _LOSCORES();

    TScoreClass GetClass() const         { return class_; }
    void SetClass( TScoreClass value )   { class_ = value; }
    void SetClass( const char* filename );

    double  PROBABility( int a );
    double  LogPROBABility( int a );

    double  PROBABILITY_1( int a );
    double  LogPROBABILITY_1( int a );

    double  PROBABILITY_2( int a );
    double  LogPROBABILITY_2( int a );

    double  FreqRatio( int a, int b );
    double  PrecomputedEntry( int a, int b );
    int     Entry( int a, int b );
    double  StatisParam( int scheme, int field );

    void    StoreProbabilities_1( const double* probs );
    void    RestoreProbabilities_1();

    void    StoreProbabilities_2( const double* probs );
    void    RestoreProbabilities_2();

    void    StoreProbabilities( const double* probs );
    void    RestoreProbabilities();

protected:
    void    ReadScoresFile( const char* filename );

    const double*   GetProbabilities_1()    { return probs_1_; }
    const double*   GetProbabilities_2()    { return probs_2_; }
    const double*   GetProbabilities()      { return auxprobabs_; }

private:
    void    ComputeLogProbabilities();
    void    ComputeLogProbabilities( const double* probs, double* logprobs );
    void    InitLogProbabs( double* logprobs );

private:
    TScoreClass     class_;
    double          logprobs_[ NUMALPH ];
    const double*   probs_1_;
    double          logprobs_1_[ NUMALPH ];
    const double*   probs_2_;
    double          logprobs_2_[ NUMALPH ];
    const double*   auxprobabs_;
    double          auxlogps_[ NUMALPH ];
};
extern _LOSCORES    LOSCORES;
void SetLOSCORES( const mystring&, const char* filename );
// //


// Frequency ratios for BLOSUM80
static const double BLOSUM80_FREQRATIOS[ NUMALPH ][ NUMALPH ] = {
// A       R       N       D       C       Q       E       G       H       I       L       K       M       F       P       S       T       W       Y       V       B       Z       X       *       -         
{4.773,  0.555,  0.510,  0.451,  0.732,  0.696,  0.703,  0.957,  0.514,  0.543,  0.505,  0.723,  0.625,  0.397,  0.771,  1.535,  0.980,  0.309,  0.436,  0.866,  0.477,  0.700,  0.750,  0.140,  0.000}, // A
{0.555,  8.245,  0.773,  0.477,  0.233,  1.394,  0.832,  0.377,  0.925,  0.299,  0.363,  2.192,  0.506,  0.287,  0.446,  0.695,  0.598,  0.294,  0.418,  0.354,  0.609,  1.046,  0.750,  0.140,  0.000}, // R
{0.510,  0.773,  8.963,  1.584,  0.300,  0.958,  0.811,  0.761,  1.124,  0.258,  0.250,  0.938,  0.382,  0.273,  0.398,  1.165,  0.908,  0.221,  0.385,  0.297,  4.868,  0.867,  0.750,  0.140,  0.000}, // N
{0.451,  0.477,  1.584,  9.106,  0.214,  0.763,  1.635,  0.541,  0.594,  0.214,  0.197,  0.677,  0.252,  0.234,  0.452,  0.774,  0.611,  0.145,  0.245,  0.245,  5.759,  1.303,  0.750,  0.140,  0.000}, // D
{0.732,  0.233,  0.300,  0.214, 20.702,  0.295,  0.180,  0.272,  0.221,  0.581,  0.493,  0.241,  0.499,  0.395,  0.269,  0.576,  0.602,  0.302,  0.308,  0.634,  0.252,  0.224,  0.750,  0.140,  0.000}, // C
{0.696,  1.394,  0.958,  0.763,  0.295,  8.340,  1.906,  0.425,  1.316,  0.309,  0.407,  1.524,  0.887,  0.285,  0.538,  0.859,  0.724,  0.408,  0.462,  0.411,  0.850,  4.360,  0.750,  0.140,  0.000}, // Q
{0.703,  0.832,  0.811,  1.635,  0.180,  1.906,  6.995,  0.399,  0.901,  0.264,  0.276,  1.195,  0.429,  0.249,  0.581,  0.845,  0.685,  0.241,  0.333,  0.369,  1.269,  5.054,  0.750,  0.140,  0.000}, // E
{0.957,  0.377,  0.761,  0.541,  0.272,  0.425,  0.399,  7.882,  0.387,  0.184,  0.210,  0.483,  0.286,  0.249,  0.347,  0.784,  0.492,  0.264,  0.230,  0.251,  0.639,  0.409,  0.750,  0.140,  0.000}, // G
{0.514,  0.925,  1.124,  0.594,  0.221,  1.316,  0.901,  0.387, 16.070,  0.258,  0.314,  0.740,  0.432,  0.572,  0.420,  0.661,  0.540,  0.390,  1.819,  0.289,  0.830,  1.059,  0.750,  0.140,  0.000}, // H
{0.543,  0.299,  0.258,  0.214,  0.581,  0.309,  0.264,  0.184,  0.258,  4.868,  1.665,  0.313,  1.512,  0.841,  0.286,  0.379,  0.701,  0.343,  0.539,  2.496,  0.234,  0.281,  0.750,  0.140,  0.000}, // I
{0.505,  0.363,  0.250,  0.197,  0.493,  0.407,  0.276,  0.210,  0.314,  1.665,  4.463,  0.357,  2.123,  1.114,  0.303,  0.368,  0.561,  0.439,  0.581,  1.220,  0.221,  0.326,  0.750,  0.140,  0.000}, // L
{0.723,  2.192,  0.938,  0.677,  0.241,  1.524,  1.195,  0.483,  0.740,  0.313,  0.357,  6.326,  0.534,  0.283,  0.597,  0.820,  0.736,  0.241,  0.408,  0.370,  0.793,  1.320,  0.750,  0.140,  0.000}, // K
{0.625,  0.506,  0.382,  0.252,  0.499,  0.887,  0.429,  0.286,  0.432,  1.512,  2.123,  0.534,  8.883,  0.893,  0.362,  0.498,  0.758,  0.561,  0.550,  1.224,  0.310,  0.603,  0.750,  0.140,  0.000}, // M
{0.397,  0.287,  0.273,  0.234,  0.395,  0.285,  0.249,  0.249,  0.572,  0.841,  1.114,  0.283,  0.893,  9.486,  0.237,  0.369,  0.445,  1.089,  2.780,  0.649,  0.252,  0.263,  0.750,  0.140,  0.000}, // F
{0.771,  0.446,  0.398,  0.452,  0.269,  0.538,  0.581,  0.347,  0.420,  0.286,  0.303,  0.597,  0.362,  0.237, 15.155,  0.652,  0.560,  0.178,  0.258,  0.370,  0.428,  0.565,  0.750,  0.140,  0.000}, // P
{1.535,  0.695,  1.165,  0.774,  0.576,  0.859,  0.845,  0.784,  0.661,  0.379,  0.368,  0.820,  0.498,  0.369,  0.652,  5.106,  1.663,  0.271,  0.462,  0.494,  0.948,  0.850,  0.750,  0.140,  0.000}, // S
{0.980,  0.598,  0.908,  0.611,  0.602,  0.724,  0.685,  0.492,  0.540,  0.701,  0.561,  0.736,  0.758,  0.445,  0.560,  1.663,  6.205,  0.285,  0.474,  0.891,  0.743,  0.700,  0.750,  0.140,  0.000}, // T
{0.309,  0.294,  0.221,  0.145,  0.302,  0.408,  0.241,  0.264,  0.390,  0.343,  0.439,  0.241,  0.561,  1.089,  0.178,  0.271,  0.285, 41.552,  2.036,  0.342,  0.179,  0.304,  0.750,  0.140,  0.000}, // W
{0.436,  0.418,  0.385,  0.245,  0.308,  0.462,  0.333,  0.230,  1.819,  0.539,  0.581,  0.408,  0.550,  2.780,  0.258,  0.462,  0.474,  2.036, 12.194,  0.489,  0.307,  0.382,  0.750,  0.140,  0.000}, // Y
{0.866,  0.354,  0.297,  0.245,  0.634,  0.411,  0.369,  0.251,  0.289,  2.496,  1.220,  0.370,  1.224,  0.649,  0.370,  0.494,  0.891,  0.342,  0.489,  4.584,  0.268,  0.385,  0.750,  0.140,  0.000}, // V
{0.477,  0.609,  4.868,  5.759,  0.252,  0.850,  1.269,  0.639,  0.830,  0.234,  0.221,  0.793,  0.310,  0.252,  0.428,  0.948,  0.743,  0.179,  0.307,  0.268,  5.362,  1.109,  0.750,  0.140,  0.000}, // B
{0.700,  1.046,  0.867,  1.303,  0.224,  4.360,  5.054,  0.409,  1.059,  0.281,  0.326,  1.320,  0.603,  0.263,  0.565,  0.850,  0.700,  0.304,  0.382,  0.385,  1.109,  4.789,  0.750,  0.140,  0.000}, // Z
{0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.140,  0.000}, // X
{0.140,  0.140,  0.140,  0.140,  0.140,  0.140,  0.140,  0.140,  0.140,  0.140,  0.140,  0.140,  0.140,  0.140,  0.140,  0.140,  0.140,  0.140,  0.140,  0.140,  0.140,  0.140,  0.140,  1.333,  0.140}, // *
{0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.140,  0.000}, // -
};

// Frequency ratios for BLOSUM62 as determined by Stephen Altschul;
//  Stephen and Jorja Henikoff used different number for B, Z, X.
//  Each entry in the table equals to substitution frequency qij
//  devided by a product of background probabilities pi * pj
// static const double BLOSUM62_FREQRATIOS[ NUMALPH ][ NUMALPH ] = {
// A       R       N       D       C       Q       E       G       H       I       L       K       M       F       P       S       T       W       Y       V       B       Z       X       *      -
// {3.903,  0.613,  0.588,  0.545,  0.868,  0.757,  0.741,  1.057,  0.569,  0.632,  0.602,  0.775,  0.723,  0.465,  0.754,  1.472,  0.984,  0.416,  0.543,  0.936,  0.565,  0.747,  0.750,  0.250,  0.000}, // A
// {0.613,  6.666,  0.859,  0.573,  0.309,  1.406,  0.961,  0.450,  0.917,  0.355,  0.474,  2.077,  0.623,  0.381,  0.481,  0.767,  0.678,  0.395,  0.556,  0.420,  0.703,  1.133,  0.750,  0.250,  0.000}, // R
// {0.588,  0.859,  7.094,  1.554,  0.398,  1.001,  0.911,  0.864,  1.222,  0.328,  0.310,  0.940,  0.474,  0.354,  0.500,  1.232,  0.984,  0.278,  0.486,  0.369,  4.071,  0.946,  0.750,  0.250,  0.000}, // N
// {0.545,  0.573,  1.554,  7.398,  0.301,  0.897,  1.688,  0.634,  0.679,  0.339,  0.287,  0.784,  0.346,  0.299,  0.599,  0.913,  0.695,  0.232,  0.346,  0.337,  4.743,  1.382,  0.750,  0.250,  0.000}, // D
// {0.868,  0.309,  0.398,  0.301, 19.577,  0.366,  0.286,  0.420,  0.355,  0.653,  0.642,  0.349,  0.611,  0.439,  0.380,  0.738,  0.741,  0.450,  0.434,  0.756,  0.345,  0.317,  0.750,  0.250,  0.000}, // C
// {0.757,  1.406,  1.001,  0.897,  0.366,  6.244,  1.902,  0.539,  1.168,  0.383,  0.477,  1.554,  0.864,  0.334,  0.641,  0.966,  0.791,  0.509,  0.611,  0.467,  0.944,  3.582,  0.750,  0.250,  0.000}, // Q
// {0.741,  0.961,  0.911,  1.688,  0.286,  1.902,  5.470,  0.481,  0.960,  0.331,  0.373,  1.308,  0.500,  0.331,  0.679,  0.950,  0.741,  0.374,  0.496,  0.429,  1.335,  4.090,  0.750,  0.250,  0.000}, // E
// {1.057,  0.450,  0.864,  0.634,  0.420,  0.539,  0.481,  6.876,  0.493,  0.275,  0.284,  0.589,  0.396,  0.341,  0.477,  0.904,  0.579,  0.422,  0.349,  0.337,  0.739,  0.503,  0.750,  0.250,  0.000}, // G
// {0.569,  0.917,  1.222,  0.679,  0.355,  1.168,  0.960,  0.493, 13.506,  0.326,  0.381,  0.779,  0.584,  0.652,  0.473,  0.737,  0.557,  0.444,  1.798,  0.339,  0.925,  1.040,  0.750,  0.250,  0.000}, // H
// {0.632,  0.355,  0.328,  0.339,  0.653,  0.383,  0.331,  0.275,  0.326,  3.998,  1.694,  0.396,  1.478,  0.946,  0.385,  0.443,  0.780,  0.409,  0.630,  2.417,  0.334,  0.351,  0.750,  0.250,  0.000}, // I
// {0.602,  0.474,  0.310,  0.287,  0.642,  0.477,  0.373,  0.284,  0.381,  1.694,  3.797,  0.428,  1.994,  1.155,  0.371,  0.429,  0.660,  0.568,  0.692,  1.314,  0.297,  0.413,  0.750,  0.250,  0.000}, // L
// {0.775,  2.077,  0.940,  0.784,  0.349,  1.554,  1.308,  0.589,  0.779,  0.396,  0.428,  4.764,  0.625,  0.344,  0.704,  0.932,  0.793,  0.359,  0.532,  0.457,  0.855,  1.403,  0.750,  0.250,  0.000}, // K
// {0.723,  0.623,  0.474,  0.346,  0.611,  0.864,  0.500,  0.396,  0.584,  1.478,  1.994,  0.625,  6.481,  1.004,  0.424,  0.599,  0.794,  0.610,  0.708,  1.269,  0.405,  0.641,  0.750,  0.250,  0.000}, // M
// {0.465,  0.381,  0.354,  0.299,  0.439,  0.334,  0.331,  0.341,  0.652,  0.946,  1.155,  0.344,  1.004,  8.129,  0.287,  0.440,  0.482,  1.374,  2.769,  0.745,  0.324,  0.332,  0.750,  0.250,  0.000}, // F
// {0.754,  0.481,  0.500,  0.599,  0.380,  0.641,  0.679,  0.477,  0.473,  0.385,  0.371,  0.704,  0.424,  0.287, 12.838,  0.755,  0.689,  0.282,  0.363,  0.443,  0.554,  0.664,  0.750,  0.250,  0.000}, // P
// {1.472,  0.767,  1.232,  0.913,  0.738,  0.966,  0.950,  0.904,  0.737,  0.443,  0.429,  0.932,  0.599,  0.440,  0.755,  3.843,  1.614,  0.385,  0.557,  0.565,  1.058,  0.956,  0.750,  0.250,  0.000}, // S
// {0.984,  0.678,  0.984,  0.695,  0.741,  0.791,  0.741,  0.579,  0.557,  0.780,  0.660,  0.793,  0.794,  0.482,  0.689,  1.614,  4.832,  0.431,  0.573,  0.981,  0.826,  0.761,  0.750,  0.250,  0.000}, // T
// {0.416,  0.395,  0.278,  0.232,  0.450,  0.509,  0.374,  0.422,  0.444,  0.409,  0.568,  0.359,  0.610,  1.374,  0.282,  0.385,  0.431, 38.108,  2.110,  0.374,  0.253,  0.426,  0.750,  0.250,  0.000}, // W
// {0.543,  0.556,  0.486,  0.346,  0.434,  0.611,  0.496,  0.349,  1.798,  0.630,  0.692,  0.532,  0.708,  2.769,  0.363,  0.557,  0.573,  2.110,  9.832,  0.658,  0.409,  0.541,  0.750,  0.250,  0.000}, // Y
// {0.936,  0.420,  0.369,  0.337,  0.756,  0.467,  0.429,  0.337,  0.339,  2.417,  1.314,  0.457,  1.269,  0.745,  0.443,  0.565,  0.981,  0.374,  0.658,  3.692,  0.351,  0.444,  0.750,  0.250,  0.000}, // V
// {0.565,  0.703,  4.071,  4.743,  0.345,  0.944,  1.335,  0.739,  0.925,  0.334,  0.297,  0.855,  0.405,  0.324,  0.554,  1.058,  0.826,  0.253,  0.409,  0.351,  4.438,  1.184,  0.750,  0.250,  0.000}, // B
// {0.747,  1.133,  0.946,  1.382,  0.317,  3.582,  4.090,  0.503,  1.040,  0.351,  0.413,  1.403,  0.641,  0.332,  0.664,  0.956,  0.761,  0.426,  0.541,  0.444,  1.184,  3.893,  0.750,  0.250,  0.000}, // Z
// {0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.250,  0.000}, // X
// {0.250,  0.250,  0.250,  0.250,  0.250,  0.250,  0.250,  0.250,  0.250,  0.250,  0.250,  0.250,  0.250,  0.250,  0.250,  0.250,  0.250,  0.250,  0.250,  0.250,  0.250,  0.250,  0.250,  1.333,  0.250}, // *
// {0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.250,  0.000}, // -
// };

// Frequency ratios for BLOSUM62 computed purely from BLOSUM62 scores;
//  Each entry in the table equals to target probability qij
//  devided by a product of marginal probabilities pi * pj
//  (computed originaly)
static const double BLOSUM62_FREQRATIOS[ NUMALPH ][ NUMALPH ] = {
// A       R       N       D       C       Q       E       G       H       I       L       K       M       F       P       S       T       W       Y       V       B       Z       X       *       -          
{3.9030, 0.6127, 0.5883, 0.5446, 0.8680, 0.7568, 0.7413, 1.0569, 0.5694, 0.6325, 0.6019, 0.7754, 0.7232, 0.4649, 0.7541, 1.4721, 0.9844, 0.4166, 0.5426, 0.9365, 0.5635, 0.7469, 0.8429, 0.2500, 0.0000}, // A
{0.6127, 6.6654, 0.8586, 0.5732, 0.3089, 1.4058, 0.9608, 0.4500, 0.9171, 0.3548, 0.4739, 2.0769, 0.6226, 0.3807, 0.4815, 0.7672, 0.6777, 0.3951, 0.5560, 0.4201, 0.6850, 1.1042, 0.6881, 0.2500, 0.0000}, // R
{0.5883, 0.8586, 7.0940, 1.5538, 0.3978, 1.0006, 0.9113, 0.8637, 1.2220, 0.3279, 0.3100, 0.9398, 0.4745, 0.3543, 0.4999, 1.2316, 0.9842, 0.2778, 0.4860, 0.3690, 3.0349, 0.9430, 0.6997, 0.2500, 0.0000}, // N
{0.5446, 0.5732, 1.5538, 7.3978, 0.3015, 0.8971, 1.6879, 0.6343, 0.6785, 0.3390, 0.2866, 0.7841, 0.3464, 0.2990, 0.5987, 0.9135, 0.6948, 0.2321, 0.3457, 0.3365, 3.7182, 1.3396, 0.6317, 0.2500, 0.0000}, // D
{0.8680, 0.3089, 0.3978, 0.3015,19.5772, 0.3658, 0.2859, 0.4204, 0.3551, 0.6535, 0.6423, 0.3491, 0.6114, 0.4390, 0.3796, 0.7384, 0.7406, 0.4500, 0.4342, 0.7559, 0.3407, 0.3129, 0.5404, 0.2500, 0.0000}, // C
{0.7568, 1.4058, 1.0006, 0.8971, 0.3658, 6.2446, 1.9017, 0.5386, 1.1680, 0.3829, 0.4773, 1.5543, 0.8642, 0.3340, 0.6413, 0.9655, 0.7913, 0.5094, 0.6111, 0.4668, 0.9413, 2.9371, 0.7779, 0.2500, 0.0000}, // Q
{0.7413, 0.9608, 0.9113, 1.6879, 0.2859, 1.9017, 5.4695, 0.4813, 0.9601, 0.3305, 0.3729, 1.3083, 0.5003, 0.3307, 0.6792, 0.9503, 0.7414, 0.3743, 0.4965, 0.4290, 1.2863, 3.7172, 0.7291, 0.2500, 0.0000}, // E
{1.0569, 0.4500, 0.8637, 0.6343, 0.4204, 0.5386, 0.4813, 6.8761, 0.4930, 0.2750, 0.2845, 0.5889, 0.3955, 0.3406, 0.4774, 0.9036, 0.5793, 0.4217, 0.3487, 0.3369, 0.7268, 0.5015, 0.6079, 0.2500, 0.0000}, // G
{0.5694, 0.9171, 1.2220, 0.6785, 0.3551, 1.1680, 0.9601, 0.4930,13.5057, 0.3263, 0.3807, 0.7789, 0.5841, 0.6520, 0.4729, 0.7367, 0.5575, 0.4441, 1.7979, 0.3395, 0.8794, 1.0314, 0.6495, 0.2500, 0.0000}, // H
{0.6325, 0.3548, 0.3279, 0.3390, 0.6535, 0.3829, 0.3305, 0.2750, 0.3263, 3.9981, 1.6944, 0.3964, 1.4777, 0.9458, 0.3847, 0.4432, 0.7798, 0.4089, 0.6304, 2.4175, 0.3341, 0.3488, 0.6625, 0.2500, 0.0000}, // I
{0.6019, 0.4739, 0.3100, 0.2866, 0.6423, 0.4773, 0.3729, 0.2845, 0.3807, 1.6944, 3.7966, 0.4283, 1.9943, 1.1546, 0.3711, 0.4289, 0.6603, 0.5681, 0.6921, 1.3142, 0.2967, 0.4081, 0.6714, 0.2500, 0.0000}, // L
{0.7754, 2.0769, 0.9398, 0.7841, 0.3491, 1.5543, 1.3083, 0.5889, 0.7789, 0.3964, 0.4283, 4.7644, 0.6253, 0.3441, 0.7038, 0.9319, 0.7929, 0.3589, 0.5322, 0.4565, 0.8493, 1.3934, 0.7612, 0.2500, 0.0000}, // K
{0.7232, 0.6226, 0.4745, 0.3464, 0.6114, 0.8642, 0.5003, 0.3955, 0.5841, 1.4777, 1.9943, 0.6253, 6.4814, 1.0044, 0.4239, 0.5986, 0.7938, 0.6103, 0.7084, 1.2689, 0.3980, 0.6110, 0.7725, 0.2500, 0.0000}, // M
{0.4649, 0.3807, 0.3543, 0.2990, 0.4390, 0.3340, 0.3307, 0.3406, 0.6520, 0.9458, 1.1546, 0.3441, 1.0044, 8.1286, 0.2875, 0.4400, 0.4817, 1.3744, 2.7695, 0.7451, 0.3222, 0.3319, 0.5953, 0.2500, 0.0000}, // F
{0.7541, 0.4815, 0.4999, 0.5987, 0.3796, 0.6413, 0.6792, 0.4774, 0.4729, 0.3847, 0.3711, 0.7038, 0.4239, 0.2875,12.8376, 0.7555, 0.6889, 0.2818, 0.3635, 0.4431, 0.5530, 0.6651, 0.5832, 0.2500, 0.0000}, // P
{1.4721, 0.7672, 1.2316, 0.9135, 0.7384, 0.9655, 0.9503, 0.9036, 0.7367, 0.4432, 0.4289, 0.9319, 0.5986, 0.4400, 0.7555, 3.8429, 1.6140, 0.3853, 0.5575, 0.5652, 1.0421, 0.9559, 0.8450, 0.2500, 0.0000}, // S
{0.9844, 0.6777, 0.9842, 0.6948, 0.7406, 0.7913, 0.7414, 0.5793, 0.5575, 0.7798, 0.6603, 0.7929, 0.7938, 0.4817, 0.6889, 1.6140, 4.8323, 0.4309, 0.5732, 0.9809, 0.8101, 0.7593, 0.8429, 0.2500, 0.0000}, // T
{0.4166, 0.3951, 0.2778, 0.2321, 0.4500, 0.5094, 0.3743, 0.4217, 0.4441, 0.4089, 0.5681, 0.3589, 0.6103, 1.3744, 0.2818, 0.3853, 0.4309,38.1074, 2.1098, 0.3745, 0.2512, 0.4189, 0.4722, 0.2500, 0.0000}, // W
{0.5426, 0.5560, 0.4860, 0.3457, 0.4342, 0.6111, 0.4965, 0.3487, 1.7979, 0.6304, 0.6921, 0.5322, 0.7084, 2.7695, 0.3635, 0.5575, 0.5732, 2.1098, 9.8321, 0.6580, 0.4017, 0.5357, 0.6537, 0.2500, 0.0000}, // Y
{0.9365, 0.4201, 0.3690, 0.3365, 0.7559, 0.4668, 0.4290, 0.3369, 0.3395, 2.4175, 1.3142, 0.4565, 1.2689, 0.7451, 0.4431, 0.5652, 0.9809, 0.3745, 0.6580, 3.6922, 0.3505, 0.4424, 0.7250, 0.2500, 0.0000}, // V
{0.5635, 0.6850, 3.0349, 3.7182, 0.3407, 0.9413, 1.2863, 0.7268, 0.8794, 0.3341, 0.2967, 0.8493, 0.3980, 0.3222, 0.5530, 1.0421, 0.8101, 0.2512, 0.4017, 0.3505, 3.3998, 1.0277, 0.6608, 0.2500, 0.0000}, // B
{0.7469, 1.1042, 0.9430, 1.3396, 0.3129, 2.9371, 3.7172, 0.5015, 1.0314, 0.3488, 0.4081, 1.3934, 0.6110, 0.3319, 0.6651, 0.9559, 0.7593, 0.4189, 0.5357, 0.4424, 1.0277, 3.4105, 0.7466, 0.2500, 0.0000}, // Z
{0.8429, 0.6881, 0.6997, 0.6317, 0.5404, 0.7779, 0.7291, 0.6079, 0.6495, 0.6625, 0.6714, 0.7612, 0.7725, 0.5953, 0.5832, 0.8450, 0.8429, 0.4722, 0.6537, 0.7250, 0.6608, 0.7466, 0.6972, 0.2500, 0.0000}, // X
{0.2500, 0.2500, 0.2500, 0.2500, 0.2500, 0.2500, 0.2500, 0.2500, 0.2500, 0.2500, 0.2500, 0.2500, 0.2500, 0.2500, 0.2500, 0.2500, 0.2500, 0.2500, 0.2500, 0.2500, 0.2500, 0.2500, 0.2500, 1.3333, 0.2500}, // *
{0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.2500, 0.0000}, // -
};



// Frequency ratios for BLOSUM45
static const double BLOSUM45_FREQRATIOS[ NUMALPH ][ NUMALPH ] = {
// A       R       N       D       C       Q       E       G       H       I       L       K       M       F       P       S       T       W       Y       V       B       Z       X       *       -         
{2.950,  0.700,  0.789,  0.689,  0.800,  0.867,  0.825,  1.080,  0.654,  0.747,  0.712,  0.786,  0.821,  0.587,  0.709,  1.300,  1.001,  0.565,  0.639,  1.010,  0.735,  0.841,  0.750,  0.290,  0.000}, // A
{0.700,  4.747,  0.898,  0.771,  0.472,  1.329,  1.011,  0.570,  0.973,  0.488,  0.601,  1.943,  0.776,  0.590,  0.582,  0.799,  0.715,  0.580,  0.807,  0.578,  0.829,  1.132,  0.750,  0.290,  0.000}, // R
{0.789,  0.898,  4.478,  1.502,  0.680,  1.032,  0.893,  1.059,  1.220,  0.564,  0.484,  1.119,  0.682,  0.572,  0.640,  1.200,  1.115,  0.390,  0.606,  0.552,  2.862,  0.946,  0.750,  0.290,  0.000}, // N
{0.689,  0.771,  1.502,  5.356,  0.533,  0.958,  1.643,  0.740,  0.976,  0.440,  0.463,  0.942,  0.494,  0.431,  0.724,  0.929,  0.876,  0.373,  0.645,  0.494,  3.594,  1.381,  0.750,  0.290,  0.000}, // D
{0.800,  0.472,  0.680,  0.533, 17.090,  0.486,  0.545,  0.557,  0.491,  0.543,  0.673,  0.547,  0.604,  0.602,  0.411,  0.797,  0.822,  0.334,  0.489,  0.715,  0.600,  0.523,  0.750,  0.290,  0.000}, // C
{0.867,  1.329,  1.032,  0.958,  0.486,  4.407,  1.531,  0.687,  1.151,  0.578,  0.642,  1.330,  0.941,  0.444,  0.716,  1.092,  0.781,  0.645,  0.829,  0.547,  0.992,  2.630,  0.750,  0.290,  0.000}, // Q
{0.825,  1.011,  0.893,  1.643,  0.545,  1.531,  3.873,  0.576,  0.962,  0.485,  0.571,  1.277,  0.615,  0.498,  0.911,  0.912,  0.833,  0.519,  0.617,  0.555,  1.300,  2.978,  0.750,  0.290,  0.000}, // E
{1.080,  0.570,  1.059,  0.740,  0.557,  0.687,  0.576,  5.071,  0.662,  0.416,  0.450,  0.678,  0.585,  0.480,  0.702,  1.058,  0.693,  0.591,  0.549,  0.479,  0.886,  0.619,  0.750,  0.290,  0.000}, // G
{0.654,  0.973,  1.220,  0.976,  0.491,  1.151,  0.962,  0.662,  9.512,  0.453,  0.670,  0.890,  0.918,  0.679,  0.661,  0.854,  0.706,  0.452,  1.472,  0.457,  1.088,  1.034,  0.750,  0.290,  0.000}, // H
{0.747,  0.488,  0.564,  0.440,  0.543,  0.578,  0.485,  0.416,  0.453,  3.233,  1.596,  0.532,  1.455,  1.064,  0.610,  0.618,  0.848,  0.565,  0.906,  2.176,  0.497,  0.521,  0.750,  0.290,  0.000}, // I
{0.712,  0.601,  0.484,  0.463,  0.673,  0.642,  0.571,  0.450,  0.670,  1.596,  2.997,  0.554,  1.731,  1.303,  0.478,  0.556,  0.781,  0.671,  0.965,  1.334,  0.472,  0.598,  0.750,  0.290,  0.000}, // L
{0.786,  1.943,  1.119,  0.942,  0.547,  1.330,  1.277,  0.678,  0.890,  0.532,  0.554,  3.327,  0.738,  0.529,  0.781,  0.890,  0.885,  0.562,  0.737,  0.592,  1.023,  1.297,  0.750,  0.290,  0.000}, // K
{0.821,  0.776,  0.682,  0.494,  0.604,  0.941,  0.615,  0.585,  0.918,  1.455,  1.731,  0.738,  4.114,  1.063,  0.644,  0.660,  0.860,  0.634,  1.023,  1.236,  0.580,  0.739,  0.750,  0.290,  0.000}, // M
{0.587,  0.590,  0.572,  0.431,  0.602,  0.444,  0.498,  0.480,  0.679,  1.064,  1.303,  0.529,  1.063,  5.748,  0.451,  0.610,  0.716,  1.355,  2.185,  0.953,  0.496,  0.477,  0.750,  0.290,  0.000}, // F
{0.709,  0.582,  0.640,  0.724,  0.411,  0.716,  0.911,  0.702,  0.661,  0.610,  0.478,  0.781,  0.644,  0.451,  8.819,  0.750,  0.856,  0.525,  0.479,  0.540,  0.686,  0.836,  0.750,  0.290,  0.000}, // P
{1.300,  0.799,  1.200,  0.929,  0.797,  1.092,  0.912,  1.058,  0.854,  0.618,  0.556,  0.890,  0.660,  0.610,  0.750,  2.782,  1.472,  0.428,  0.706,  0.728,  1.053,  0.981,  0.750,  0.290,  0.000}, // S
{1.001,  0.715,  1.115,  0.876,  0.822,  0.781,  0.833,  0.693,  0.706,  0.848,  0.781,  0.885,  0.860,  0.716,  0.856,  1.472,  3.139,  0.454,  0.744,  1.040,  0.985,  0.813,  0.750,  0.290,  0.000}, // T
{0.565,  0.580,  0.390,  0.373,  0.334,  0.645,  0.519,  0.591,  0.452,  0.565,  0.671,  0.562,  0.634,  1.355,  0.525,  0.428,  0.454, 29.702,  1.801,  0.473,  0.381,  0.567,  0.750,  0.290,  0.000}, // W
{0.639,  0.807,  0.606,  0.645,  0.489,  0.829,  0.617,  0.549,  1.472,  0.906,  0.965,  0.737,  1.023,  2.185,  0.479,  0.706,  0.744,  1.801,  5.753,  0.809,  0.627,  0.698,  0.750,  0.290,  0.000}, // Y
{1.010,  0.578,  0.552,  0.494,  0.715,  0.547,  0.555,  0.479,  0.457,  2.176,  1.334,  0.592,  1.236,  0.953,  0.540,  0.728,  1.040,  0.473,  0.809,  2.871,  0.520,  0.552,  0.750,  0.290,  0.000}, // V
{0.735,  0.829,  2.862,  3.594,  0.600,  0.992,  1.300,  0.886,  1.088,  0.497,  0.472,  1.023,  0.580,  0.496,  0.686,  1.053,  0.985,  0.381,  0.627,  0.520,  3.260,  1.182,  0.750,  0.290,  0.000}, // B
{0.841,  1.132,  0.946,  1.381,  0.523,  2.630,  2.978,  0.619,  1.034,  0.521,  0.598,  1.297,  0.739,  0.477,  0.836,  0.981,  0.813,  0.567,  0.698,  0.552,  1.182,  2.845,  0.750,  0.290,  0.000}, // Z
{0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.750,  0.290,  0.000}, // X
{0.290,  0.290,  0.290,  0.290,  0.290,  0.290,  0.290,  0.290,  0.290,  0.290,  0.290,  0.290,  0.290,  0.290,  0.290,  0.290,  0.290,  0.290,  0.290,  0.290,  0.290,  0.290,  0.290,  1.333,  0.290}, // *
{0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.290,  0.000}, // -
};


// Frequency ratios obtained by pscores
static const double PSCORES_FREQRATIOS[ NUMALPH ][ NUMALPH ] = {
// A       R       N       D       C       Q       E       G       H       I       L       K       M       F       P       S       T       W       Y       V       B       Z       X       *       -
{2.6399, 0.7772, 0.6046, 0.6396, 1.3343, 0.8524, 0.8788, 0.9549, 0.6629, 0.7821, 0.7160, 0.7947, 0.8863, 0.6782, 0.8406, 1.0633, 0.9068, 0.5385, 0.7350, 1.0114, 0.6255, 0.8694, 0.9096, 0.2692, 0.0000}, // A
{0.7772, 3.2222, 1.1060, 0.9739, 0.5769, 1.7280, 1.4248, 0.7038, 1.1446, 0.5082, 0.5734, 2.0486, 0.7491, 0.5213, 0.8564, 0.9549, 0.9844, 0.6488, 0.8224, 0.5188, 1.0241, 1.5249, 0.8875, 0.2692, 0.0000}, // R
{0.6046, 1.1060, 4.6090, 1.7032, 1.0571, 1.1988, 1.0683, 1.0617, 1.2828, 0.3409, 0.3881, 1.1640, 0.6028, 0.5028, 0.7141, 1.2564, 1.0116, 0.4786, 0.7474, 0.3642, 2.5234, 1.1125, 0.8044, 0.2692, 0.0000}, // N
{0.6396, 0.9739, 1.7032, 4.5842, 0.5278, 1.2140, 1.6612, 0.8334, 0.9902, 0.2692, 0.2782, 1.1105, 0.4417, 0.3635, 0.8345, 1.1700, 0.8626, 0.3788, 0.5435, 0.3105, 3.1007, 1.4876, 0.7361, 0.2692, 0.0000}, // D
{1.3343, 0.5769, 1.0571, 0.5278, 6.5544, 0.6014, 0.4600, 0.8342, 0.7558, 1.0468, 0.9810, 0.5346, 1.1102, 0.9978, 0.5809, 1.1723, 1.0666, 0.7596, 0.9339, 1.2918, 0.6944, 0.5055, 0.8851, 0.2692, 0.0000}, // C
{0.8524, 1.7280, 1.1988, 1.2140, 0.6014, 2.5555, 1.8075, 0.7634, 1.1916, 0.4924, 0.5738, 1.7922, 0.8599, 0.5273, 0.8579, 1.0435, 1.0210, 0.5745, 0.7825, 0.5117, 1.2080, 2.0418, 0.9101, 0.2692, 0.0000}, // Q
{0.8788, 1.4248, 1.0683, 1.6612, 0.4600, 1.8075, 3.1430, 0.7491, 0.9492, 0.4201, 0.4277, 1.6446, 0.5885, 0.4155, 1.0072, 0.9867, 0.9604, 0.4420, 0.5855, 0.4509, 1.3954, 2.5868, 0.8540, 0.2692, 0.0000}, // E
{0.9549, 0.7038, 1.0617, 0.8334, 0.8342, 0.7634, 0.7491, 4.9690, 0.7570, 0.2915, 0.2879, 0.8177, 0.4809, 0.4218, 0.7177, 1.0752, 0.7110, 0.3942, 0.4658, 0.3672, 0.9170, 0.7541, 0.7112, 0.2692, 0.0000}, // G
{0.6629, 1.1446, 1.2828, 0.9902, 0.7558, 1.1916, 0.9492, 0.7570, 6.8668, 0.5083, 0.5619, 1.0191, 1.0884, 0.9062, 0.8053, 1.0680, 0.8575, 1.0543, 1.5969, 0.5232, 1.0968, 1.0284, 0.8608, 0.2692, 0.0000}, // H
{0.7821, 0.5082, 0.3409, 0.2692, 1.0468, 0.4924, 0.4201, 0.2915, 0.5083, 2.8700, 1.8051, 0.4448, 1.4890, 1.4123, 0.5529, 0.4636, 0.7253, 0.9336, 0.8864, 2.2487, 0.2955, 0.4443, 0.7475, 0.2692, 0.0000}, // I
{0.7160, 0.5734, 0.3881, 0.2782, 0.9810, 0.5738, 0.4277, 0.2879, 0.5619, 1.8051, 2.8619, 0.4879, 1.6867, 1.5207, 0.4791, 0.4363, 0.6036, 0.9125, 1.1057, 1.3686, 0.3173, 0.4743, 0.7406, 0.2692, 0.0000}, // L
{0.7947, 2.0486, 1.1640, 1.1105, 0.5346, 1.7922, 1.6446, 0.8177, 1.0191, 0.4448, 0.4879, 3.1664, 0.6585, 0.4404, 0.9710, 0.9900, 1.0097, 0.4682, 0.6541, 0.4636, 1.1313, 1.6951, 0.8708, 0.2692, 0.0000}, // K
{0.8863, 0.7491, 0.6028, 0.4417, 1.1102, 0.8599, 0.5885, 0.4809, 1.0884, 1.4890, 1.6867, 0.6585, 3.7274, 1.4213, 0.5855, 0.6614, 0.8331, 1.1025, 1.1362, 1.2605, 0.4994, 0.6726, 0.8839, 0.2692, 0.0000}, // M
{0.6782, 0.5213, 0.5028, 0.3635, 0.9978, 0.5273, 0.4155, 0.4218, 0.9062, 1.4123, 1.5207, 0.4404, 1.4213, 4.3794, 0.5739, 0.5469, 0.6617, 2.7991, 2.4194, 1.1852, 0.4132, 0.4518, 0.7837, 0.2692, 0.0000}, // F
{0.8406, 0.8564, 0.7141, 0.8345, 0.5809, 0.8579, 1.0072, 0.7177, 0.8053, 0.5529, 0.4791, 0.9710, 0.5855, 0.5739, 7.2858, 0.9525, 0.8545, 0.5244, 0.5648, 0.6290, 0.7847, 0.9519, 0.7996, 0.2692, 0.0000}, // P
{1.0633, 0.9549, 1.2564, 1.1700, 1.1723, 1.0435, 0.9867, 1.0752, 1.0680, 0.4636, 0.4363, 0.9900, 0.6614, 0.5469, 0.9525, 2.6125, 1.6190, 0.5226, 0.6688, 0.5819, 1.2034, 1.0063, 0.8918, 0.2692, 0.0000}, // S
{0.9068, 0.9844, 1.0116, 0.8626, 1.0666, 1.0210, 0.9604, 0.7110, 0.8575, 0.7253, 0.6036, 1.0097, 0.8331, 0.6617, 0.8545, 1.6190, 3.1768, 0.6107, 0.7246, 0.9277, 0.9186, 0.9813, 0.9216, 0.2692, 0.0000}, // T
{0.5385, 0.6488, 0.4786, 0.3788, 0.7596, 0.5745, 0.4420, 0.3942, 1.0543, 0.9336, 0.9125, 0.4682, 1.1025, 2.7991, 0.5244, 0.5226, 0.6107,16.6611, 2.9300, 0.8216, 0.4154, 0.4848, 0.6973, 0.2692, 0.0000}, // W
{0.7350, 0.8224, 0.7474, 0.5435, 0.9339, 0.7825, 0.5855, 0.4658, 1.5969, 0.8864, 1.1057, 0.6541, 1.1362, 2.4194, 0.5648, 0.6688, 0.7246, 2.9300, 5.3274, 0.8269, 0.6163, 0.6484, 0.8390, 0.2692, 0.0000}, // Y
{1.0114, 0.5188, 0.3642, 0.3105, 1.2918, 0.5117, 0.4509, 0.3672, 0.5232, 2.2487, 1.3686, 0.4636, 1.2605, 1.1852, 0.6290, 0.5819, 0.9277, 0.8216, 0.8269, 2.8866, 0.3307, 0.4715, 0.7925, 0.2692, 0.0000}, // V
{0.6255, 1.0241, 2.5234, 3.1007, 0.6944, 1.2080, 1.3954, 0.9170, 1.0968, 0.2955, 0.3173, 1.1313, 0.4994, 0.4132, 0.7847, 1.2034, 0.9186, 0.4154, 0.6163, 0.3307, 2.8584, 1.3264, 0.7624, 0.2692, 0.0000}, // B
{0.8694, 1.5249, 1.1125, 1.4876, 0.5055, 2.0418, 2.5868, 0.7541, 1.0284, 0.4443, 0.4743, 1.6951, 0.6726, 0.4518, 0.9519, 1.0063, 0.9813, 0.4848, 0.6484, 0.4715, 1.3264, 2.3801, 0.8734, 0.2692, 0.0000}, // Z
{0.9096, 0.8875, 0.8044, 0.7361, 0.8851, 0.9101, 0.8540, 0.7112, 0.8608, 0.7475, 0.7406, 0.8708, 0.8839, 0.7837, 0.7996, 0.8918, 0.9216, 0.6973, 0.8390, 0.7925, 0.7624, 0.8734, 0.8164, 0.2692, 0.0000}, // X
{0.2692, 0.2692, 0.2692, 0.2692, 0.2692, 0.2692, 0.2692, 0.2692, 0.2692, 0.2692, 0.2692, 0.2692, 0.2692, 0.2692, 0.2692, 0.2692, 0.2692, 0.2692, 0.2692, 0.2692, 0.2692, 0.2692, 0.2692, 1.2599, 0.2726}, // *
{0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.2726, 0.0000}, // -
};


// (Gonnet marginal probabilities solved from O p = 1, where 
//  O is odds matrix, and p is probability vector to solve for:)
static const double Gonnet_PROBS[NUMALPH] = {
// A           R           N           D           C           Q           E           G
// H           I           L           K           M           F           P           S
// T           W           Y           V
0.07691477, 0.05208473, 0.04450198, 0.05403615, 0.01915176, 0.03930480, 0.05939026, 0.07545474,
0.02418457, 0.05054209, 0.09926734, 0.06011962, 0.02195156, 0.04124713, 0.04543059, 0.04717934,
0.07169904, 0.01292610, 0.03165732, 0.07295611, 0.0, 0.0, 0.0, 0.0, 0.0
};

// Gonnet frequency ratios;
// characteristics of the bit scaled matrix
//             Scale: 1/4 (ln2/4); 1/3 (ln2/3)
//           Entropy: 0.2465141
//     ExpectedScore: -0.2065916
//      HighestScore: 19; 14 (after rescaling)
//       LowestScore: -7; -5 (after rescaling)
static const double GONNET_FREQRATIOS[ NUMALPH ][ NUMALPH ] = {
//  A         R         N         D         C         Q         E         G         H         I         L         K         M         F         P         S         T         W         Y         V         B         Z         X         *         -           
{1.737801, 0.870964, 0.933254, 0.933254, 1.122018, 0.954993, 1.000000, 1.122018, 0.831764, 0.831764, 0.758578, 0.912011, 0.851138, 0.588844, 1.071519, 1.288250, 1.148154, 0.436516, 0.602560, 1.023293, 0.933254, 0.981827, 0.965985, 0.301995, 0.000000}, // A 
{0.870964, 2.951209, 1.071519, 0.933254, 0.602560, 1.412538, 1.096478, 0.794328, 1.148154, 0.575440, 0.602560, 1.862087, 0.676083, 0.478630, 0.812831, 0.954993, 0.954993, 0.691831, 0.660693, 0.630957, 0.993339, 1.212850, 0.899603, 0.301995, 0.000000}, // R 
{0.933254, 1.071519, 2.398833, 1.659587, 0.660693, 1.174898, 1.230269, 1.096478, 1.318257, 0.524807, 0.501187, 1.202264, 0.602560, 0.489779, 0.812831, 1.230269, 1.122018, 0.436516, 0.724436, 0.602560, 1.960015, 1.207911, 0.913044, 0.301995, 0.000000}, // N 
{0.933254, 0.933254, 1.659587, 2.951209, 0.478630, 1.230269, 1.862087, 1.023293, 1.096478, 0.416869, 0.398107, 1.122018, 0.501187, 0.354813, 0.851138, 1.122018, 1.000000, 0.301995, 0.524807, 0.512861, 2.275593, 1.578759, 0.846966, 0.301995, 0.000000}, // D 
{1.122018, 0.602560, 0.660693, 0.478630,14.125375, 0.575440, 0.501187, 0.630957, 0.741310, 0.776247, 0.707946, 0.524807, 0.812831, 0.831764, 0.489779, 1.023293, 0.891251, 0.794328, 0.891251, 1.000000, 0.553639, 0.529535, 0.760315, 0.301995, 0.000000}, // C 
{0.954993, 1.412538, 1.174898, 1.230269, 0.575440, 1.862087, 1.479108, 0.794328, 1.318257, 0.645654, 0.691831, 1.412538, 0.794328, 0.549541, 0.954993, 1.047129, 1.000000, 0.537032, 0.676083, 0.707946, 1.204946, 1.621155, 0.947445, 0.301995, 0.000000}, // Q 
{1.000000, 1.096478, 1.230269, 1.862087, 0.501187, 1.479108, 2.290868, 0.831764, 1.096478, 0.537032, 0.524807, 1.318257, 0.630957, 0.407380, 0.891251, 1.047129, 0.977237, 0.371535, 0.537032, 0.645654, 1.544216, 1.924569, 0.897863, 0.301995, 0.000000}, // E 
{1.122018, 0.794328, 1.096478, 1.023293, 0.630957, 0.794328, 0.831764, 4.570882, 0.724436, 0.354813, 0.363078, 0.776247, 0.446684, 0.301995, 0.691831, 1.096478, 0.776247, 0.398107, 0.398107, 0.467735, 1.055720, 0.816648, 0.754251, 0.301995, 0.000000}, // G 
{0.831764, 1.148154, 1.318257, 1.096478, 0.741310, 1.318257, 1.096478, 0.724436, 3.981072, 0.602560, 0.645654, 1.148154, 0.741310, 0.977237, 0.776247, 0.954993, 0.933254, 0.831764, 1.659587, 0.630957, 1.191598, 1.179939, 0.926044, 0.301995, 0.000000}, // H 
{0.831764, 0.575440, 0.524807, 0.416869, 0.776247, 0.645654, 0.537032, 0.354813, 0.602560, 2.511886, 1.905461, 0.616595, 1.778279, 1.258925, 0.549541, 0.660693, 0.870964, 0.660693, 0.851138, 2.041738, 0.462554, 0.577909, 0.835475, 0.301995, 0.000000}, // I 
{0.758578, 0.602560, 0.501187, 0.398107, 0.707946, 0.691831, 0.524807, 0.363078, 0.645654, 1.905461, 2.511886, 0.616595, 1.905461, 1.584893, 0.588844, 0.616595, 0.741310, 0.851138, 1.000000, 1.513561, 0.441735, 0.585854, 0.829736, 0.301995, 0.000000}, // L 
{0.912011, 1.862087, 1.202264, 1.122018, 0.524807, 1.412538, 1.318257, 0.776247, 1.148154, 0.616595, 0.616595, 2.089296, 0.724436, 0.467735, 0.870964, 1.023293, 1.023293, 0.446684, 0.616595, 0.676083, 1.157574, 1.355025, 0.920537, 0.301995, 0.000000}, // K 
{0.851138, 0.676083, 0.602560, 0.501187, 0.812831, 0.794328, 0.630957, 0.446684, 0.741310, 1.778279, 1.905461, 0.724436, 2.691535, 1.445440, 0.575440, 0.724436, 0.870964, 0.794328, 0.954993, 1.445440, 0.544665, 0.691551, 0.888514, 0.301995, 0.000000}, // M 
{0.588844, 0.478630, 0.489779, 0.354813, 0.831764, 0.549541, 0.407380, 0.301995, 0.977237, 1.258925, 1.584893, 0.467735, 1.445440, 5.011872, 0.416869, 0.524807, 0.602560, 2.290868, 3.235937, 1.023293, 0.410419, 0.458957, 0.734299, 0.301995, 0.000000}, // F 
{1.071519, 0.812831, 0.812831, 0.851138, 0.489779, 0.954993, 0.891251, 0.691831, 0.776247, 0.549541, 0.588844, 0.870964, 0.575440, 0.416869, 5.754399, 1.096478, 1.023293, 0.316228, 0.489779, 0.660693, 0.833619, 0.916109, 0.817724, 0.301995, 0.000000}, // P 
{1.288250, 0.954993, 1.230269, 1.122018, 1.023293, 1.047129, 1.047129, 1.096478, 0.954993, 0.660693, 0.616595, 1.023293, 0.724436, 0.524807, 1.096478, 1.659587, 1.412538, 0.467735, 0.645654, 0.794328, 1.169674, 1.047129, 0.955512, 0.301995, 0.000000}, // S 
{1.148154, 0.954993, 1.122018, 1.000000, 0.891251, 1.000000, 0.977237, 0.776247, 0.933254, 0.870964, 0.741310, 1.023293, 0.870964, 0.602560, 1.023293, 1.412538, 1.778279, 0.446684, 0.645654, 1.000000, 1.053370, 0.986240, 0.964741, 0.301995, 0.000000}, // T 
{0.436516, 0.691831, 0.436516, 0.301995, 0.794328, 0.537032, 0.371535, 0.398107, 0.831764, 0.660693, 0.851138, 0.446684, 0.794328, 2.290868, 0.316228, 0.467735, 0.446684,26.302680, 2.570396, 0.549541, 0.356664, 0.430248, 0.594604, 0.301995, 0.000000}, // W 
{0.602560, 0.660693, 0.724436, 0.524807, 0.891251, 0.676083, 0.537032, 0.398107, 1.659587, 0.851138, 1.000000, 0.616595, 0.954993, 3.235937, 0.489779, 0.645654, 0.645654, 2.570396, 6.025596, 0.776247, 0.607054, 0.588606, 0.782596, 0.301995, 0.000000}, // Y 
{1.023293, 0.630957, 0.602560, 0.512861, 1.000000, 0.707946, 0.645654, 0.467735, 0.630957, 2.041738, 1.513561, 0.676083, 1.445440, 1.023293, 0.660693, 0.794328, 1.000000, 0.549541, 0.776247, 2.187762, 0.551586, 0.669776, 0.891829, 0.301995, 0.000000}, // V 
{0.933254, 0.993339, 1.960015, 2.275593, 0.553639, 1.204946, 1.544216, 1.055720, 1.191598, 0.462554, 0.441735, 1.157574, 0.544665, 0.410419, 0.833619, 1.169674, 1.053370, 0.356664, 0.607054, 0.551586, 2.127226, 1.398946, 0.876194, 0.301995, 0.000000}, // B 
{0.981827, 1.212850, 1.207911, 1.578759, 0.529535, 1.621155, 1.924569, 0.816648, 1.179939, 0.577909, 0.585854, 1.355025, 0.691551, 0.458957, 0.916109, 1.047129, 0.986240, 0.430248, 0.588606, 0.669776, 1.398946, 1.797466, 0.917290, 0.301995, 0.000000}, // Z 
{0.965985, 0.899603, 0.913044, 0.846966, 0.760315, 0.947445, 0.897863, 0.754251, 0.926044, 0.835475, 0.829736, 0.920537, 0.888514, 0.734299, 0.817724, 0.955512, 0.964741, 0.594604, 0.782596, 0.891829, 0.876194, 0.917290, 0.866995, 0.301995, 0.000000}, // X 
{0.301995, 0.301995, 0.301995, 0.301995, 0.301995, 0.301995, 0.301995, 0.301995, 0.301995, 0.301995, 0.301995, 0.301995, 0.301995, 0.301995, 0.301995, 0.301995, 0.301995, 0.301995, 0.301995, 0.301995, 0.301995, 0.301995, 0.301995, 1.258925, 0.000000}, // * 
{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}, // - 
};


// Computed BLOSUM80 table given frequency ratios
struct _TCOMPUTED_BLOSUM80
{
    _TCOMPUTED_BLOSUM80();
    double      operator()( int a, int b ) { return data[a][b]; }
private:
public:
    double      data[ NUMALPH ][ NUMALPH ];
};
extern _TCOMPUTED_BLOSUM80  COMPUTED_BLOSUM80;

//
// Computed BLOSUM62 table given frequency ratios
struct _TCOMPUTED_BLOSUM62
{
    _TCOMPUTED_BLOSUM62();
    double      operator()( int a, int b ) { return data[a][b]; }
private:
public:
    double      data[ NUMALPH ][ NUMALPH ];
};
extern _TCOMPUTED_BLOSUM62  COMPUTED_BLOSUM62;

//
// Computed BLOSUM45 table given frequency ratios
struct _TCOMPUTED_BLOSUM45
{
    _TCOMPUTED_BLOSUM45();
    double      operator()( int a, int b ) { return data[a][b]; }
private:
public:
    double      data[ NUMALPH ][ NUMALPH ];
};
extern _TCOMPUTED_BLOSUM45  COMPUTED_BLOSUM45;

//
// Computed PSCORES_ table given frequency ratios
struct _TCOMPUTED_PSCORES_
{
    _TCOMPUTED_PSCORES_();
    double      operator()( int a, int b ) { return data[a][b]; }
    void        Compute();
private:
public:
    double      data[ NUMALPH ][ NUMALPH ];
};
extern _TCOMPUTED_PSCORES_  COMPUTED_PSCORES_;

//
// Computed GONNET table given frequency ratios
struct _TCOMPUTED_GONNET_
{
    _TCOMPUTED_GONNET_();
    double      operator()( int a, int b ) { return data[a][b]; }
    void        Compute();
private:
public:
    double      data[ NUMALPH ][ NUMALPH ];
};
extern _TCOMPUTED_GONNET_  COMPUTED_GONNET;


//Substitution table: 'BLOSUM80'
//             Scale: 1/2
//           Entropy: 0.9868
//     ExpectedScore: -0.7442
//      HighestScore: 11
//       LowestScore: -6

static const int    BLOSUM80[ NUMALPH ][ NUMALPH ] =
{// A    R    N    D    C    Q    E    G    H    I    L    K    M    F    P    S    T    W    Y    V    B    Z    X    *    -
{   5,  -2,  -2,  -2,  -1,  -1,  -1,   0,  -2,  -2,  -2,  -1,  -1,  -3,  -1,   1,   0,  -3,  -2,   0,  -2,  -1,  -1,  -6, SCORE_MIN }, // A 
{  -2,   6,  -1,  -2,  -4,   1,  -1,  -3,   0,  -3,  -3,   2,  -2,  -4,  -2,  -1,  -1,  -4,  -3,  -3,  -2,   0,  -1,  -6, SCORE_MIN }, // R 
{  -2,  -1,   6,   1,  -3,   0,  -1,  -1,   0,  -4,  -4,   0,  -3,  -4,  -3,   0,   0,  -4,  -3,  -4,   4,   0,  -1,  -6, SCORE_MIN }, // N
{  -2,  -2,   1,   6,  -4,  -1,   1,  -2,  -2,  -4,  -5,  -1,  -4,  -4,  -2,  -1,  -1,  -6,  -4,  -4,   4,   1,  -1,  -6, SCORE_MIN }, // D
{  -1,  -4,  -3,  -4,   9,  -4,  -5,  -4,  -4,  -2,  -2,  -4,  -2,  -3,  -4,  -2,  -1,  -3,  -3,  -1,  -4,  -4,  -1,  -6, SCORE_MIN }, // C
{  -1,   1,   0,  -1,  -4,   6,   2,  -2,   1,  -3,  -3,   1,   0,  -4,  -2,   0,  -1,  -3,  -2,  -3,   0,   3,  -1,  -6, SCORE_MIN }, // Q
{  -1,  -1,  -1,   1,  -5,   2,   6,  -3,   0,  -4,  -4,   1,  -2,  -4,  -2,   0,  -1,  -4,  -3,  -3,   1,   4,  -1,  -6, SCORE_MIN }, // E
{   0,  -3,  -1,  -2,  -4,  -2,  -3,   6,  -3,  -5,  -4,  -2,  -4,  -4,  -3,  -1,  -2,  -4,  -4,  -4,  -1,  -3,  -1,  -6, SCORE_MIN }, // G
{  -2,   0,   0,  -2,  -4,   1,   0,  -3,   8,  -4,  -3,  -1,  -2,  -2,  -3,  -1,  -2,  -3,   2,  -4,  -1,   0,  -1,  -6, SCORE_MIN }, // H
{  -2,  -3,  -4,  -4,  -2,  -3,  -4,  -5,  -4,   5,   1,  -3,   1,  -1,  -4,  -3,  -1,  -3,  -2,   3,  -4,  -4,  -1,  -6, SCORE_MIN }, // I
{  -2,  -3,  -4,  -5,  -2,  -3,  -4,  -4,  -3,   1,   4,  -3,   2,   0,  -3,  -3,  -2,  -2,  -2,   1,  -4,  -3,  -1,  -6, SCORE_MIN }, // L
{  -1,   2,   0,  -1,  -4,   1,   1,  -2,  -1,  -3,  -3,   5,  -2,  -4,  -1,  -1,  -1,  -4,  -3,  -3,  -1,   1,  -1,  -6, SCORE_MIN }, // K
{  -1,  -2,  -3,  -4,  -2,   0,  -2,  -4,  -2,   1,   2,  -2,   6,   0,  -3,  -2,  -1,  -2,  -2,   1,  -3,  -2,  -1,  -6, SCORE_MIN }, // M
{  -3,  -4,  -4,  -4,  -3,  -4,  -4,  -4,  -2,  -1,   0,  -4,   0,   6,  -4,  -3,  -2,   0,   3,  -1,  -4,  -4,  -1,  -6, SCORE_MIN }, // F
{  -1,  -2,  -3,  -2,  -4,  -2,  -2,  -3,  -3,  -4,  -3,  -1,  -3,  -4,   8,  -1,  -2,  -5,  -4,  -3,  -2,  -2,  -1,  -6, SCORE_MIN }, // P
{   1,  -1,   0,  -1,  -2,   0,   0,  -1,  -1,  -3,  -3,  -1,  -2,  -3,  -1,   5,   1,  -4,  -2,  -2,   0,   0,  -1,  -6, SCORE_MIN }, // S
{   0,  -1,   0,  -1,  -1,  -1,  -1,  -2,  -2,  -1,  -2,  -1,  -1,  -2,  -2,   1,   5,  -4,  -2,   0,  -1,  -1,  -1,  -6, SCORE_MIN }, // T
{  -3,  -4,  -4,  -6,  -3,  -3,  -4,  -4,  -3,  -3,  -2,  -4,  -2,   0,  -5,  -4,  -4,  11,   2,  -3,  -5,  -4,  -1,  -6, SCORE_MIN }, // W
{  -2,  -3,  -3,  -4,  -3,  -2,  -3,  -4,   2,  -2,  -2,  -3,  -2,   3,  -4,  -2,  -2,   2,   7,  -2,  -3,  -3,  -1,  -6, SCORE_MIN }, // Y
{   0,  -3,  -4,  -4,  -1,  -3,  -3,  -4,  -4,   3,   1,  -3,   1,  -1,  -3,  -2,   0,  -3,  -2,   4,  -4,  -3,  -1,  -6, SCORE_MIN }, // V
{  -2,  -2,   4,   4,  -4,   0,   1,  -1,  -1,  -4,  -4,  -1,  -3,  -4,  -2,   0,  -1,  -5,  -3,  -4,   4,   0,  -1,  -6, SCORE_MIN }, // B
{  -1,   0,   0,   1,  -4,   3,   4,  -3,   0,  -4,  -3,   1,  -2,  -4,  -2,   0,  -1,  -4,  -3,  -3,   0,   4,  -1,  -6, SCORE_MIN }, // Z
{  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -6, SCORE_MIN }, // X
{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,   1, SCORE_MIN }, // *
{SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,
 SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN, SCORE_MIN }, // -
};

//Substitution table: 'BLOSUM62'
//             Scale: 1/2
//           Entropy: 0.6979
//     ExpectedScore: -0.5209
//      HighestScore: 11
//       LowestScore: -4

static const int    BLOSUM62[ NUMALPH ][ NUMALPH ] =
{// A    R    N    D    C    Q    E    G    H    I    L    K    M    F    P    S    T    W    Y    V    B    Z    X    *    -
{   4,  -1,  -2,  -2,   0,  -1,  -1,   0,  -2,  -1,  -1,  -1,  -1,  -2,  -1,   1,   0,  -3,  -2,   0,  -2,  -1,  -1,  -4, SCORE_MIN }, // A 
{  -1,   5,   0,  -2,  -3,   1,   0,  -2,   0,  -3,  -2,   2,  -1,  -3,  -2,  -1,  -1,  -3,  -2,  -3,  -1,   0,  -1,  -4, SCORE_MIN }, // R 
{  -2,   0,   6,   1,  -3,   0,   0,   0,   1,  -3,  -3,   0,  -2,  -3,  -2,   1,   0,  -4,  -2,  -3,   3,   0,  -1,  -4, SCORE_MIN }, // N 
{  -2,  -2,   1,   6,  -3,   0,   2,  -1,  -1,  -3,  -4,  -1,  -3,  -3,  -1,   0,  -1,  -4,  -3,  -3,   4,   1,  -1,  -4, SCORE_MIN }, // D 
{   0,  -3,  -3,  -3,   9,  -3,  -4,  -3,  -3,  -1,  -1,  -3,  -1,  -2,  -3,  -1,  -1,  -2,  -2,  -1,  -3,  -3,  -1,  -4, SCORE_MIN }, // C 
{  -1,   1,   0,   0,  -3,   5,   2,  -2,   0 , -3,  -2,   1,   0,  -3,  -1,   0,  -1,  -2,  -1,  -2,   0,   3,  -1,  -4, SCORE_MIN }, // Q 
{  -1,   0,   0,   2,  -4,   2,   5,  -2,   0,  -3,  -3,   1,  -2,  -3,  -1,   0,  -1,  -3,  -2,  -2,   1,   4,  -1,  -4, SCORE_MIN }, // E 
{   0,  -2,   0,  -1,  -3,  -2,  -2,   6,  -2,  -4,  -4,  -2,  -3,  -3,  -2,   0,  -2,  -2,  -3,  -3,  -1,  -2,  -1,  -4, SCORE_MIN }, // G 
{  -2,   0,   1,  -1,  -3,   0,   0,  -2,   8,  -3,  -3,  -1,  -2,  -1,  -2,  -1,  -2,  -2,   2,  -3,   0,   0,  -1,  -4, SCORE_MIN }, // H 
{  -1,  -3,  -3,  -3,  -1,  -3,  -3,  -4,  -3,   4,   2,  -3,   1,   0,  -3,  -2,  -1,  -3,  -1,   3,  -3,  -3,  -1,  -4, SCORE_MIN }, // I 
{  -1,  -2,  -3,  -4,  -1,  -2,  -3,  -4,  -3,   2,   4 , -2,   2,   0,  -3,  -2,  -1,  -2,  -1,   1,  -4,  -3,  -1,  -4, SCORE_MIN }, // L 
{  -1,   2,   0,  -1,  -3,   1,   1,  -2,  -1,  -3,  -2,   5,  -1,  -3,  -1,   0,  -1,  -3,  -2,  -2,   0,   1,  -1,  -4, SCORE_MIN }, // K
{  -1,  -1,  -2,  -3,  -1,   0,  -2,  -3,  -2,   1,   2,  -1,   5,   0,  -2,  -1,  -1,  -1,  -1,   1,  -3,  -1,  -1,  -4, SCORE_MIN }, // M 
{  -2,  -3,  -3,  -3,  -2,  -3,  -3,  -3,  -1,   0,   0,  -3,   0,   6,  -4,  -2,  -2,   1,   3,  -1,  -3,  -3,  -1,  -4, SCORE_MIN }, // F 
{  -1,  -2,  -2,  -1,  -3,  -1,  -1,  -2,  -2,  -3,  -3,  -1,  -2,  -4,   7,  -1,  -1,  -4,  -3,  -2,  -2,  -1,  -1,  -4, SCORE_MIN }, // P 
{   1,  -1,   1,   0,  -1,   0,   0,   0,  -1,  -2,  -2,   0,  -1,  -2,  -1,   4,   1,  -3,  -2,  -2,   0,   0,  -1,  -4, SCORE_MIN }, // S 
{   0,  -1,   0,  -1,  -1,  -1,  -1,  -2,  -2,  -1,  -1,  -1,  -1,  -2,  -1,   1,   5,  -2,  -2,   0,  -1,  -1,  -1,  -4, SCORE_MIN }, // T
{  -3,  -3,  -4,  -4,  -2,  -2,  -3,  -2,  -2,  -3,  -2,  -3,  -1,   1,  -4,  -3,  -2,  11,   2,  -3,  -4,  -3,  -1,  -4, SCORE_MIN }, // W 
{  -2,  -2,  -2,  -3,  -2,  -1,  -2,  -3,   2,  -1,  -1,  -2,  -1,   3,  -3,  -2,  -2,   2,   7,  -1,  -3,  -2,  -1,  -4, SCORE_MIN }, // Y 
{   0,  -3,  -3,  -3,  -1,  -2,  -2,  -3,  -3,   3,   1,  -2,   1,  -1,  -2,  -2,   0,  -3,  -1,   4,  -3,  -2,  -1,  -4, SCORE_MIN }, // V 
{  -2,  -1,   3,   4,  -3,   0,   1,  -1,   0,  -3,  -4,   0,  -3,  -3,  -2,   0,  -1,  -4,  -3,  -3,   4,   1,  -1,  -4, SCORE_MIN }, // B 
{  -1,   0,   0,   1,  -3,   3,   4,  -2,   0,  -3,  -3,   1,  -1,  -3,  -1,   0,  -1,  -3,  -2,  -2,   1,   4,  -1,  -4, SCORE_MIN }, // Z 
{  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -4, SCORE_MIN }, // X 
{  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,   1, SCORE_MIN }, // *
{SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,
 SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN, SCORE_MIN }, // -
};

//Substitution table: 'BLOSUM45'
//             Scale: 1/3
//           Entropy: 0.3795
//     ExpectedScore: -0.2789
//      HighestScore: 15
//       LowestScore: -5

static const int    BLOSUM45[ NUMALPH ][ NUMALPH ] =
{// A    R    N    D    C    Q    E    G    H    I    L    K    M    F    P    S    T    W    Y    V    B    Z    X    *    -              
{   5,  -2,  -1,  -2,  -1,  -1,  -1,   0,  -2,  -1,  -1,  -1,  -1,  -2,  -1,   1,   0,  -2,  -2,   0,  -1,  -1,  -1,  -5, SCORE_MIN }, // A
{  -2,   7,   0,  -1,  -3,   1,   0,  -2,   0,  -3,  -2,   3,  -1,  -2,  -2,  -1,  -1,  -2,  -1,  -2,  -1,   0,  -1,  -5, SCORE_MIN }, // R
{  -1,   0,   6,   2,  -2,   0,   0,   0,   1,  -2,  -3,   0,  -2,  -2,  -2,   1,   0,  -4,  -2,  -3,   4,   0,  -1,  -5, SCORE_MIN }, // N
{  -2,  -1,   2,   7,  -3,   0,   2,  -1,   0,  -4,  -3,   0,  -3,  -4,  -1,   0,  -1,  -4,  -2,  -3,   5,   1,  -1,  -5, SCORE_MIN }, // D
{  -1,  -3,  -2,  -3,  12,  -3,  -3,  -3,  -3,  -3,  -2,  -3,  -2,  -2,  -4,  -1,  -1,  -5,  -3,  -1,  -2,  -3,  -1,  -5, SCORE_MIN }, // C
{  -1,   1,   0,   0,  -3,   6,   2,  -2,   1,  -2,  -2,   1,   0,  -4,  -1,   0,  -1,  -2,  -1,  -3,   0,   4,  -1,  -5, SCORE_MIN }, // Q
{  -1,   0,   0,   2,  -3,   2,   6,  -2,   0,  -3,  -2,   1,  -2,  -3,   0,   0,  -1,  -3,  -2,  -3,   1,   4,  -1,  -5, SCORE_MIN }, // E
{   0,  -2,   0,  -1,  -3,  -2,  -2,   7,  -2,  -4,  -3,  -2,  -2,  -3,  -2,   0,  -2,  -2,  -3,  -3,  -1,  -2,  -1,  -5, SCORE_MIN }, // G
{  -2,   0,   1,   0,  -3,   1,   0,  -2,  10,  -3,  -2,  -1,   0,  -2,  -2,  -1,  -2,  -3,   2,  -3,   0,   0,  -1,  -5, SCORE_MIN }, // H
{  -1,  -3,  -2,  -4,  -3,  -2,  -3,  -4,  -3,   5,   2,  -3,   2,   0,  -2,  -2,  -1,  -2,   0,   3,  -3,  -3,  -1,  -5, SCORE_MIN }, // I
{  -1,  -2,  -3,  -3,  -2,  -2,  -2,  -3,  -2,   2,   5,  -3,   2,   1,  -3,  -3,  -1,  -2,   0,   1,  -3,  -2,  -1,  -5, SCORE_MIN }, // L
{  -1,   3,   0,   0,  -3,   1,   1,  -2,  -1,  -3,  -3,   5,  -1,  -3,  -1,  -1,  -1,  -2,  -1,  -2,   0,   1,  -1,  -5, SCORE_MIN }, // K
{  -1,  -1,  -2,  -3,  -2,   0,  -2,  -2,   0,   2,   2,  -1,   6,   0,  -2,  -2,  -1,  -2,   0,   1,  -2,  -1,  -1,  -5, SCORE_MIN }, // M
{  -2,  -2,  -2,  -4,  -2,  -4,  -3,  -3,  -2,   0,   1,  -3,   0,   8,  -3,  -2,  -1,   1,   3,   0,  -3,  -3,  -1,  -5, SCORE_MIN }, // F
{  -1,  -2,  -2,  -1,  -4,  -1,   0,  -2,  -2,  -2,  -3,  -1,  -2,  -3,   9,  -1,  -1,  -3,  -3,  -3,  -2,  -1,  -1,  -5, SCORE_MIN }, // P
{   1,  -1,   1,   0,  -1,   0,   0,   0,  -1,  -2,  -3,  -1,  -2,  -2,  -1,   4,   2,  -4,  -2,  -1,   0,   0,  -1,  -5, SCORE_MIN }, // S
{   0,  -1,   0,  -1,  -1,  -1,  -1,  -2,  -2,  -1,  -1,  -1,  -1,  -1,  -1,   2,   5,  -3,  -1,   0,   0,  -1,  -1,  -5, SCORE_MIN }, // T
{  -2,  -2,  -4,  -4,  -5,  -2,  -3,  -2,  -3,  -2,  -2,  -2,  -2,   1,  -3,  -4,  -3,  15,   3,  -3,  -4,  -2,  -1,  -5, SCORE_MIN }, // W
{  -2,  -1,  -2,  -2,  -3,  -1,  -2,  -3,   2,   0,   0,  -1,   0,   3,  -3,  -2,  -1,   3,   8,  -1,  -2,  -2,  -1,  -5, SCORE_MIN }, // Y
{   0,  -2,  -3,  -3,  -1,  -3,  -3,  -3,  -3,   3,   1,  -2,   1,   0,  -3,  -1,   0,  -3,  -1,   5,  -3,  -3,  -1,  -5, SCORE_MIN }, // V
{  -1,  -1,   4,   5,  -2,   0,   1,  -1,   0,  -3,  -3,   0,  -2,  -3,  -2,   0,   0,  -4,  -2,  -3,   4,   2,  -1,  -5, SCORE_MIN }, // B
{  -1,   0,   0,   1,  -3,   4,   4,  -2,   0,  -3,  -2,   1,  -1,  -3,  -1,   0,  -1,  -2,  -2,  -3,   2,   4,  -1,  -5, SCORE_MIN }, // Z
{  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -5, SCORE_MIN }, // X
{  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,   1, SCORE_MIN }, // *
{SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,
 SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN, SCORE_MIN }, // -
};

//Substitution table produced by pscores
//             Scale: 1/3
//           Entropy: 0.3360
//     ExpectedScore: -0.2945
//      HighestScore: 12
//       LowestScore: -6

static const int    PSCORES_[ NUMALPH ][ NUMALPH ] =
{// A    R    N    D    C    Q    E    G    H    I    L    K    M    F    P    S    T    W    Y    V    B    Z    X    *    -              
{   4,  -1,  -2,  -2,   1,  -1,  -1,   0,  -2,  -1,  -1,  -1,  -1,  -2,  -1,   0,   0,  -3,  -1,   0,  -2,  -1,   0,  -6, SCORE_MIN }, // A
{  -1,   5,   0,   0,  -2,   2,   2,  -2,   1,  -3,  -2,   3,  -1,  -3,  -1,   0,   0,  -2,  -1,  -3,   0,   2,  -1,  -6, SCORE_MIN }, // R
{  -2,   0,   7,   2,   0,   1,   0,   0,   1,  -5,  -4,   1,  -2,  -3,  -1,   1,   0,  -3,  -1,  -4,   4,   0,  -1,  -6, SCORE_MIN }, // N
{  -2,   0,   2,   7,  -3,   1,   2,  -1,   0,  -6,  -6,   0,  -4,  -4,  -1,   1,  -1,  -4,  -3,  -5,   5,   2,  -1,  -6, SCORE_MIN }, // D
{   1,  -2,   0,  -3,   8,  -2,  -3,  -1,  -1,   0,   0,  -3,   0,   0,  -2,   1,   0,  -1,   0,   1,  -2,  -3,  -1,  -6, SCORE_MIN }, // C
{  -1,   2,   1,   1,  -2,   4,   3,  -1,   1,  -3,  -2,   3,  -1,  -3,  -1,   0,   0,  -2,  -1,  -3,   1,   3,   0,  -6, SCORE_MIN }, // Q
{  -1,   2,   0,   2,  -3,   3,   5,  -1,   0,  -4,  -4,   2,  -2,  -4,   0,   0,   0,  -4,  -2,  -3,   1,   4,  -1,  -6, SCORE_MIN }, // E
{   0,  -2,   0,  -1,  -1,  -1,  -1,   7,  -1,  -5,  -5,  -1,  -3,  -4,  -1,   0,  -1,  -4,  -3,  -4,   0,  -1,  -1,  -6, SCORE_MIN }, // G
{  -2,   1,   1,   0,  -1,   1,   0,  -1,   8,  -3,  -2,   0,   0,   0,  -1,   0,  -1,   0,   2,  -3,   0,   0,  -1,  -6, SCORE_MIN }, // H
{  -1,  -3,  -5,  -6,   0,  -3,  -4,  -5,  -3,   5,   3,  -4,   2,   1,  -3,  -3,  -1,   0,  -1,   4,  -5,  -4,  -1,  -6, SCORE_MIN }, // I
{  -1,  -2,  -4,  -6,   0,  -2,  -4,  -5,  -2,   3,   5,  -3,   2,   2,  -3,  -4,  -2,   0,   0,   1,  -5,  -3,  -1,  -6, SCORE_MIN }, // L
{  -1,   3,   1,   0,  -3,   3,   2,  -1,   0,  -4,  -3,   5,  -2,  -4,   0,   0,   0,  -3,  -2,  -3,   1,   2,  -1,  -6, SCORE_MIN }, // K
{  -1,  -1,  -2,  -4,   0,  -1,  -2,  -3,   0,   2,   2,  -2,   6,   2,  -2,  -2,  -1,   0,   1,   1,  -3,  -2,  -1,  -6, SCORE_MIN }, // M
{  -2,  -3,  -3,  -4,   0,  -3,  -4,  -4,   0,   1,   2,  -4,   2,   6,  -2,  -3,  -2,   4,   4,   1,  -4,  -3,  -1,  -6, SCORE_MIN }, // F
{  -1,  -1,  -1,  -1,  -2,  -1,   0,  -1,  -1,  -3,  -3,   0,  -2,  -2,   9,   0,  -1,  -3,  -2,  -2,  -1,   0,  -1,  -6, SCORE_MIN }, // P
{   0,   0,   1,   1,   1,   0,   0,   0,   0,  -3,  -4,   0,  -2,  -3,   0,   4,   2,  -3,  -2,  -2,   1,   0,   0,  -6, SCORE_MIN }, // S
{   0,   0,   0,  -1,   0,   0,   0,  -1,  -1,  -1,  -2,   0,  -1,  -2,  -1,   2,   5,  -2,  -1,   0,   0,   0,   0,  -6, SCORE_MIN }, // T
{  -3,  -2,  -3,  -4,  -1,  -2,  -4,  -4,   0,   0,   0,  -3,   0,   4,  -3,  -3,  -2,  12,   5,  -1,  -4,  -3,  -2,  -6, SCORE_MIN }, // W
{  -1,  -1,  -1,  -3,   0,  -1,  -2,  -3,   2,  -1,   0,  -2,   1,   4,  -2,  -2,  -1,   5,   7,  -1,  -2,  -2,  -1,  -6, SCORE_MIN }, // Y
{   0,  -3,  -4,  -5,   1,  -3,  -3,  -4,  -3,   4,   1,  -3,   1,   1,  -2,  -2,   0,  -1,  -1,   5,  -5,  -3,  -1,  -6, SCORE_MIN }, // V
{  -2,   0,   4,   5,  -2,   1,   1,   0,   0,  -5,  -5,   1,  -3,  -4,  -1,   1,   0,  -4,  -2,  -5,   5,   1,  -1,  -6, SCORE_MIN }, // B
{  -1,   2,   0,   2,  -3,   3,   4,  -1,   0,  -4,  -3,   2,  -2,  -3,   0,   0,   0,  -3,  -2,  -3,   1,   4,  -1,  -6, SCORE_MIN }, // Z
{   0,  -1,  -1,  -1,  -1,   0,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   0,   0,  -2,  -1,  -1,  -1,  -1,  -1,  -6, SCORE_MIN }, // X
{  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,  -6,   1, SCORE_MIN }, // *
{SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,
 SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN,SCORE_MIN, SCORE_MIN }, // -
};




static const double Blosum80ScalingConstant = 2.0;
static const double Blosum62ScalingConstant = 2.0;
static const double Blosum45ScalingConstant = 3.0;
static const double PScores_ScalingConstant = 3.0;
// static const double Gonnet_ScalingConstant = 4.0;
static const double Gonnet_ScalingConstant = 3.0;


#define FINF (( double )( SHRT_MAX ))

enum TBlosumFields {
    Open,       //gap existence penalty
    Extend,     //gap extension penalty
    Lambda,     //statistical parameter Lambda
    K,          //statistical parameter K
    H,          //statistical parameter H
    alpha,      //statistical parameter alpha (slope of edge-effect correction with linear regression)
    beta,       //statistical parameter beta (intercept of edge-effect correction with linear regression)
    NumFields
};

enum TBlosum80Entries {
    Ungapped80,
    g25_2_80,
    g13_2_80,
    g9_2_80,
    g8_2_80,
    g7_2_80,
    g6_2_80,
    g11_1_80,
    g10_1_80,
    g9_1_80,
    Num80Entries
};

// (Data from the NCBI BLAST toolkit)
static const double BLOSUM80_VALUES[Num80Entries][NumFields] =
{//Open Extend  Lambda  K       H       alpha    beta
{ FINF, FINF,   0.3430, 0.177,  0.6568, 0.5222, -1.6   },
{ 25,   2,      0.342,  0.17,   0.66,   0.52,   -1.6   },
{ 13,   2,      0.336,  0.15,   0.57,   0.59,   -3.0   },
{ 9,    2,      0.319,  0.11,   0.42,   0.76,   -6.0   },
{ 8,    2,      0.308,  0.090,  0.35,   0.89,   -9.0   },
{ 7,    2,      0.293,  0.070,  0.27,   1.10,   -14.0  },
{ 6,    2,      0.268,  0.045,  0.19,   1.40,   -19.0  },
{ 11,   1,      0.314,  0.095,  0.35,   0.90,   -9.0   },
{ 10,   1,      0.299,  0.071,  0.27,   1.10,   -14.0  },
{ 9,    1,      0.279,  0.048,  0.20,   1.40,   -19.0  }
};


enum TBlosumEntries {
    Ungapped,
    g11_2,
    g10_2,
    g9_2,
    g8_2,
    g7_2,
    g6_2,
    g13_1,
    g12_1,
    g11_1,
    g10_1,
    g9_1,
    NumEntries
};

// (Data from the NCBI BLAST toolkit)
static const double BLOSUM62_VALUES[NumEntries][NumFields] =
{//Open Extend  Lambda  K       H       alpha    beta
{ FINF, FINF,   0.3176, 0.134,  0.4012, 0.7916, -3.2   },
{ 11,   2,      0.297,  0.082,  0.27,   1.1,    -10.0  },
{ 10,   2,      0.291,  0.075,  0.23,   1.3,    -15.0  },
{ 9,    2,      0.279,  0.058,  0.19,   1.5,    -19.0  },
{ 8,    2,      0.264,  0.045,  0.15,   1.8,    -26.0  },
{ 7,    2,      0.239,  0.027,  0.10,   2.5,    -46.0  },
{ 6,    2,      0.201,  0.012,  0.061,  3.3,    -58.0  },
{ 13,   1,      0.292,  0.071,  0.23,   1.2,    -11.0  },
{ 12,   1,      0.283,  0.059,  0.19,   1.5,    -19.0  },
{ 11,   1,      0.267,  0.041,  0.14,   1.9,    -30.0  },
{ 10,   1,      0.243,  0.024,  0.10,   2.5,    -44.0  },
{ 9,    1,      0.206,  0.010,  0.052,  4.0,    -87.0  }
};

enum TBlosum45Entries {
    Ungapped45,
    g13_3_45,
    g12_3_45,
    g11_3_45,
    g10_3_45,
    g16_2_45,
    g15_2_45,
    g14_2_45,
    g13_2_45,
    g12_2_45,
    g19_1_45,
    g18_1_45,
    g17_1_45,
    g16_1_45,
    Num45Entries
};

// (Data from the NCBI BLAST toolkit)
static const double BLOSUM45_VALUES[Num45Entries][NumFields] =
{//Open Extend  Lambda  K       H       alpha    beta
{ FINF, FINF,   0.2291, 0.0924, 0.2514, 0.9113, -5.7    },
{ 13,   3,      0.207,  0.049,  0.14,   1.5,    -22.0   },
{ 12,   3,      0.199,  0.039,  0.11,   1.8,    -34.0   },
{ 11,   3,      0.190,  0.031,  0.095,  2.0,    -38.0   },
{ 10,   3,      0.179,  0.023,  0.075,  2.4,    -51.0   },
{ 16,   2,      0.210,  0.051,  0.14,   1.5,    -24.0   },
{ 15,   2,      0.203,  0.041,  0.12,   1.7,    -31.0   },
{ 14,   2,      0.195,  0.032,  0.10,   1.9,    -36.0   },
{ 13,   2,      0.185,  0.024,  0.084,  2.2,    -45.0   },
{ 12,   2,      0.171,  0.016,  0.061,  2.8,    -65.0   },
{ 19,   1,      0.205,  0.040,  0.11,   1.9,    -43.0   },
{ 18,   1,      0.198,  0.032,  0.10,   2.0,    -43.0   },
{ 17,   1,      0.189,  0.024,  0.079,  2.4,    -57.0   },
{ 16,   1,      0.176,  0.016,  0.063,  2.8,    -67.0   }
};

enum TPscores_Entries {
    UngappedPS,
    NumPSEntries
};

static const double PSCORES_VALUES[NumPSEntries][NumFields] =
{//Open Extend  Lambda  K       H       alpha    beta
{ FINF, FINF,   0.2218, 0.0927, 0.2199, 0.9500, -6.0    },
};

enum TGonnet_Entries {
    UngappedGn,
    NumGnEntries
};

static const double GONNET_VALUES[NumGnEntries][NumFields] =
{//Open Extend  Lambda  K       H       alpha    beta
// { FINF, FINF,   0.1730, 0.0744, 0.2002, 0.5000, -1.0    },//scale==4
{ FINF, FINF,   0.2305, 0.0781, 0.2143, 0.5000, -1.0    },//scale==3
};

#endif//__datapro_h__
